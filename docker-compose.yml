version: '3.8'
services:
  mongoDB:
    image: mongo
    container_name: books-mongodb
    ports:
      - 27017:27017
    restart: always
    environment:
      # should be kept as secrets - externalize to environment variables!
      MONGO_INITDB_DATABASE: booksdb
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootroot

  eureka1:
    image: mindaugasjasiunas/eureka
    container_name: eureka-1
    ports:
      - 8761:8761
    restart: always
    environment:
      spring.application.name: eureka-service
      server.port: 8761
      eureka.instance.hostname: eureka1
      eureka.client.service-url.defaultZone: http://eureka1:8761/eureka, http://eureka2:8761/eureka, http://eureka3:8761/eureka
  eureka2:
    image: mindaugasjasiunas/eureka
    container_name: eureka-2
    ports:
      - 8762:8761
    restart: always
    environment:
      spring.application.name: eureka-service
      server.port: 8761
      eureka.instance.hostname: eureka2
      eureka.client.service-url.defaultZone: http://eureka1:8761/eureka, http://eureka2:8761/eureka, http://eureka3:8761/eureka
  eureka3:
    image: mindaugasjasiunas/eureka
    container_name: eureka-3
    ports:
      - 8763:8761
    restart: always
    environment:
      spring.application.name: eureka-service
      server.port: 8761
      eureka.instance.hostname: eureka3
      eureka.client.service-url.defaultZone: http://eureka1:8761/eureka, http://eureka2:8761/eureka, http://eureka3:8761/eureka

  api-gateway:
    image: mindaugasjasiunas/cloud-api-gateway
    container_name: cloud-api-gateway
    ports:
      - 9090:9090
    environment:
      spring.application.name: 'gateway'
      server.port: 9090
      eureka.client.service-url.defaultZone: http://eureka1:8761/eureka, http://eureka2:8761/eureka, http://eureka3:8761/eureka
      # trace gateway logs
      logging.level.org.springframework.cloud.gateway: debug
      logging.level.reactor.netty.http.client: debug
      # Spring Boot Actuator
      management.endpoint.gateway.enabled: true # default value
      management.endpoints.web.exposure.include: gateway
      # Gateway
      spring.cloud.gateway.discovery.locator.enabled: false # turn-off automatic locator
      spring.cloud.gateway.discovery.locator.lower-case-service-id: true
      spring.cloud.gateway.default-filters: DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin # for all routes # remove duplicate values of Access-Control-Allow-Credentials and Access-Control-Allow-Origin response headers in cases when both the gateway CORS logic and the downstream add them.
      # Define routes (overrides ALL if any provided in gateway properties)
      SPRING_CLOUD_GATEWAY_ROUTES[0]_ID: books-service-get-books
      SPRING_CLOUD_GATEWAY_ROUTES[0]_URI: lb://books-service/
      SPRING_CLOUD_GATEWAY_ROUTES[0]_PREDICATES[0]: Path=/api/v1/books
      SPRING_CLOUD_GATEWAY_ROUTES[0]_PREDICATES[1]: Method=GET
      SPRING_CLOUD_GATEWAY_ROUTES[0]_FILTERS[0]: RemoveRequestHeader=Cookie

      SPRING_CLOUD_GATEWAY_ROUTES[1]_ID: books-service-get-book
      SPRING_CLOUD_GATEWAY_ROUTES[1]_URI: lb://books-service/
      SPRING_CLOUD_GATEWAY_ROUTES[1]_PREDICATES[0]: Path=/api/v1/books/**
      SPRING_CLOUD_GATEWAY_ROUTES[1]_PREDICATES[1]: Method=GET
      SPRING_CLOUD_GATEWAY_ROUTES[1]_FILTERS[0]: RemoveRequestHeader=Cookie

      SPRING_CLOUD_GATEWAY_ROUTES[2]_ID: books-service-create-book
      SPRING_CLOUD_GATEWAY_ROUTES[2]_URI: lb://books-service/
      SPRING_CLOUD_GATEWAY_ROUTES[2]_PREDICATES[0]: Path=/api/v1/books
      SPRING_CLOUD_GATEWAY_ROUTES[2]_PREDICATES[1]: Method=POST
      SPRING_CLOUD_GATEWAY_ROUTES[2]_PREDICATES[2]: Header=Authorization, Bearer (.*)
      SPRING_CLOUD_GATEWAY_ROUTES[2]_FILTERS[0]: RemoveRequestHeader=Cookie

      SPRING_CLOUD_GATEWAY_ROUTES[3]_ID: books-service-update-book
      SPRING_CLOUD_GATEWAY_ROUTES[3]_URI: lb://books-service/
      SPRING_CLOUD_GATEWAY_ROUTES[3]_PREDICATES[0]: Path=/api/v1/books/**
      SPRING_CLOUD_GATEWAY_ROUTES[3]_PREDICATES[1]: Method=PUT
      SPRING_CLOUD_GATEWAY_ROUTES[3]_PREDICATES[2]: Header=Authorization, Bearer (.*)
      SPRING_CLOUD_GATEWAY_ROUTES[3]_FILTERS[0]: RemoveRequestHeader=Cookie

      SPRING_CLOUD_GATEWAY_ROUTES[4]_ID: books-service-partially-update-book
      SPRING_CLOUD_GATEWAY_ROUTES[4]_URI: lb://books-service/
      SPRING_CLOUD_GATEWAY_ROUTES[4]_PREDICATES[0]: Path=/api/v1/books/**
      SPRING_CLOUD_GATEWAY_ROUTES[4]_PREDICATES[1]: Method=PATCH
      SPRING_CLOUD_GATEWAY_ROUTES[4]_PREDICATES[2]: Header=Authorization, Bearer (.*)
      SPRING_CLOUD_GATEWAY_ROUTES[4]_FILTERS[0]: RemoveRequestHeader=Cookie

      SPRING_CLOUD_GATEWAY_ROUTES[5]_ID: books-service-update-book
      SPRING_CLOUD_GATEWAY_ROUTES[5]_URI: lb://books-service/
      SPRING_CLOUD_GATEWAY_ROUTES[5]_PREDICATES[0]: Path=/api/v1/books/**
      SPRING_CLOUD_GATEWAY_ROUTES[5]_PREDICATES[1]: Method=DELETE
      SPRING_CLOUD_GATEWAY_ROUTES[5]_PREDICATES[2]: Header=Authorization, Bearer (.*)
      SPRING_CLOUD_GATEWAY_ROUTES[5]_FILTERS[0]: RemoveRequestHeader=Cookie

      SPRING_CLOUD_GATEWAY_ROUTES[6]_ID: users-service-login
      SPRING_CLOUD_GATEWAY_ROUTES[6]_URI: lb://users-service/
      SPRING_CLOUD_GATEWAY_ROUTES[6]_PREDICATES[0]: Path=/login
      SPRING_CLOUD_GATEWAY_ROUTES[6]_PREDICATES[1]: Method=POST
      SPRING_CLOUD_GATEWAY_ROUTES[6]_FILTERS[0]: RemoveRequestHeader=Cookie

      SPRING_CLOUD_GATEWAY_ROUTES[7]_ID: users-service-register
      SPRING_CLOUD_GATEWAY_ROUTES[7]_URI: lb://users-service/
      SPRING_CLOUD_GATEWAY_ROUTES[7]_PREDICATES[0]: Path=/register
      SPRING_CLOUD_GATEWAY_ROUTES[7]_PREDICATES[1]: Method=POST
      SPRING_CLOUD_GATEWAY_ROUTES[7]_FILTERS[0]: RemoveRequestHeader=Cookie

      SPRING_CLOUD_GATEWAY_ROUTES[8]_ID: users-service-reset-access-token
      SPRING_CLOUD_GATEWAY_ROUTES[8]_URI: lb://users-service/
      SPRING_CLOUD_GATEWAY_ROUTES[8]_PREDICATES[0]: Path=/resettoken
      SPRING_CLOUD_GATEWAY_ROUTES[8]_PREDICATES[1]: Method=POST
      SPRING_CLOUD_GATEWAY_ROUTES[8]_FILTERS[0]: RemoveRequestHeader=Cookie

      SPRING_CLOUD_GATEWAY_ROUTES[9]_ID: books-service-get-my-books
      SPRING_CLOUD_GATEWAY_ROUTES[9]_URI: lb://books-service/
      SPRING_CLOUD_GATEWAY_ROUTES[9]_PREDICATES[0]: Path=/api/v1/my-books
      SPRING_CLOUD_GATEWAY_ROUTES[9]_PREDICATES[1]: Method=GET
      SPRING_CLOUD_GATEWAY_ROUTES[9]_PREDICATES[2]: Header=Authorization, Bearer (.*)
      SPRING_CLOUD_GATEWAY_ROUTES[9]_FILTERS[0]: RemoveRequestHeader=Cookie

      SPRING_CLOUD_GATEWAY_ROUTES[10]_ID: books-service-get-wishlist
      SPRING_CLOUD_GATEWAY_ROUTES[10]_URI: lb://books-service/
      SPRING_CLOUD_GATEWAY_ROUTES[10]_PREDICATES[0]: Path=/api/v1/wishlist
      SPRING_CLOUD_GATEWAY_ROUTES[10]_PREDICATES[1]: Method=GET
      SPRING_CLOUD_GATEWAY_ROUTES[10]_PREDICATES[2]: Header=Authorization, Bearer (.*)
      SPRING_CLOUD_GATEWAY_ROUTES[10]_FILTERS[0]: RemoveRequestHeader=Cookie

      SPRING_CLOUD_GATEWAY_ROUTES[11]_ID: books-service-add-to-my-books
      SPRING_CLOUD_GATEWAY_ROUTES[11]_URI: lb://books-service/
      SPRING_CLOUD_GATEWAY_ROUTES[11]_PREDICATES[0]: Path=/api/v1/my-books/**
      SPRING_CLOUD_GATEWAY_ROUTES[11]_PREDICATES[1]: Method=POST
      SPRING_CLOUD_GATEWAY_ROUTES[11]_PREDICATES[2]: Header=Authorization, Bearer (.*)
      SPRING_CLOUD_GATEWAY_ROUTES[11]_FILTERS[0]: RemoveRequestHeader=Cookie
      
      SPRING_CLOUD_GATEWAY_ROUTES[12]_ID: books-service-add-to-wishlist
      SPRING_CLOUD_GATEWAY_ROUTES[12]_URI: lb://books-service/
      SPRING_CLOUD_GATEWAY_ROUTES[12]_PREDICATES[0]: Path=/api/v1/wishlist/**
      SPRING_CLOUD_GATEWAY_ROUTES[12]_PREDICATES[1]: Method=POST
      SPRING_CLOUD_GATEWAY_ROUTES[12]_PREDICATES[2]: Header=Authorization, Bearer (.*)
      SPRING_CLOUD_GATEWAY_ROUTES[12]_FILTERS[0]: RemoveRequestHeader=Cookie

      SPRING_CLOUD_GATEWAY_ROUTES[13]_ID: books-service-remove-from-my-books
      SPRING_CLOUD_GATEWAY_ROUTES[13]_URI: lb://books-service/
      SPRING_CLOUD_GATEWAY_ROUTES[13]_PREDICATES[0]: Path=/api/v1/my-books/**
      SPRING_CLOUD_GATEWAY_ROUTES[13]_PREDICATES[1]: Method=DELETE
      SPRING_CLOUD_GATEWAY_ROUTES[13]_PREDICATES[2]: Header=Authorization, Bearer (.*)
      SPRING_CLOUD_GATEWAY_ROUTES[13]_FILTERS[0]: RemoveRequestHeader=Cookie

      SPRING_CLOUD_GATEWAY_ROUTES[14]_ID: books-service-delete-from-wishlist
      SPRING_CLOUD_GATEWAY_ROUTES[14]_URI: lb://books-service/
      SPRING_CLOUD_GATEWAY_ROUTES[14]_PREDICATES[0]: Path=/api/v1/wishlist/**
      SPRING_CLOUD_GATEWAY_ROUTES[14]_PREDICATES[1]: Method=DELETE
      SPRING_CLOUD_GATEWAY_ROUTES[14]_PREDICATES[2]: Header=Authorization, Bearer (.*)
      SPRING_CLOUD_GATEWAY_ROUTES[14]_FILTERS[0]: RemoveRequestHeader=Cookie
      
    restart: always
    depends_on:
      - eureka1
      - eureka2
      - eureka3

  books:
    image: mindaugasjasiunas/books-service
    container_name: books-backend-service
    restart: always
    environment:
      spring.application.name: 'books-service'
      eureka.client.service-url.defaultZone: http://eureka1:8761/eureka, http://eureka2:8761/eureka, http://eureka3:8761/eureka
      eureka.instance.prefer-ip-address: true # for API Gateway
      spring.data.mongodb.auto-index-creation: true
      # should be kept as secrets - externalize to environment variables!
      spring.data.mongodb.uri: mongodb://root:rootroot@mongoDB:27017/books-mongodb?authSource=admin&retryWrites=true&w=majority
      spring.data.mongodb.authentication-database: admin
      spring.data.mongodb.database: booksdb
      spring.data.mongodb.username: root
      spring.data.mongodb.password: rootroot
      jwt.secretKey: "SuperLongAndVerySecureKey-[].~^+$$&4"
    depends_on:
      - mongoDB
    # pull logs from this docker container
    labels:
      collect_logs_with_filebeat: 'true'
      decode_log_event_to_json_object: 'true'

  users:
    image: mindaugasjasiunas/users-service
    container_name: users-backend-service
    restart: always
    environment:
      spring.application.name: 'users-service'
      eureka.client.service-url.defaultZone: http://eureka1:8761/eureka, http://eureka2:8761/eureka, http://eureka3:8761/eureka
      eureka.instance.prefer-ip-address: true # for API Gateway
      spring.data.mongodb.auto-index-creation: true
      # should be kept as secrets - externalize to environment variables!
      spring.data.mongodb.uri: mongodb://root:rootroot@mongoDB:27017/books-mongodb?authSource=admin&retryWrites=true&w=majority
      spring.data.mongodb.authentication-database: admin
      spring.data.mongodb.database: booksdb
      spring.data.mongodb.username: root
      spring.data.mongodb.password: rootroot
      jwt.secretKey: "SuperLongAndVerySecureKey-[].~^+$$&4"
      jwt.refreshTokenExpirationAfterMilliseconds: 86400000 # 1 day
      jwt.accessTokenExpirationAfterMilliseconds: 420000 # 7 minutes
    depends_on:
      - mongoDB
    # pull logs from this docker container
    labels:
      collect_logs_with_filebeat: 'true'
      decode_log_event_to_json_object: 'true'


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.5
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - data01:/usr/share/elasticsearch/data #  The volume mount ensures that elasticsearch data is persisted across container restarts.
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - elastic

  redis-cache: # buffer
    image: redis:6.2
    container_name: redis-cache
#    ports:
#      - 6379:6379
    networks:
      - elastic # make sure on the same network as ELK stack - otherwise error connecting redis-cache:6379

  logstash:
    image: docker.elastic.co/logstash/logstash:7.4.0
    container_name: logstash
    ports:
      - 9600:9600
      - 12201:12201/udp
    environment:
      - logger.level = DEBUG
      - ELASTICSEARCH_HOSTS = http://elasticsearch:9200
      - LS_JAVA_OPTS = "-Xmx256m -Xms256m"
    volumes:
      - ./data/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro # overrides 'main' pipeline config file with our config file
    depends_on:
      - elasticsearch
    networks:
      - elastic

  kibana:
    image: docker.elastic.co/kibana/kibana:7.4.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS = http://elasticsearch:9200
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    networks:
      - elastic

  filebeat: # reads docker containers logs
    container_name: filebeat
    image:
      docker.elastic.co/beats/filebeat:7.7.0
    volumes:
      - ./data/filebeat.docker.yml:/usr/share/filebeat/filebeat.yml:ro # Configuration file (:ro - read only mount)
      - /var/lib/docker/containers:/var/lib/docker/containers:ro           # Docker logs
      - /var/run/docker.sock:/var/run/docker.sock:ro                       # Additional information about containers
    user: root                                                             # Allow access to log files and docker.sock
    restart: on-failure
    networks:
      - elastic

  
volumes:
  data01:
    driver: local
networks:
  elastic:
    driver: bridge
